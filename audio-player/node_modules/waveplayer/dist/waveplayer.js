'use strict';

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var arrayWithoutHoles = _arrayWithoutHoles;

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

var iterableToArray = _iterableToArray;

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var nonIterableSpread = _nonIterableSpread;

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

var toConsumableArray = _toConsumableArray;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      defineProperty(target, key, source[key]);
    });
  }

  return target;
}

var objectSpread = _objectSpread;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

var Mediator =
/*#__PURE__*/
function () {
  /**
   * The topics to subscribe to.
   *
   * @var {Object}
   */
  function Mediator() {
    classCallCheck(this, Mediator);

    defineProperty(this, "_topics", void 0);

    this._topics = {};
  }
  /**
   * Subscribe to the given topic with the given callback.
   *
   * @param  {string} topic
   * @param  {Function} callback
   * @returns {boolean}
   */


  createClass(Mediator, [{
    key: "on",
    value: function on(topic, callback) {
      if (!this._topics.hasOwnProperty(topic)) {
        this._topics[topic] = [];
      }

      this._topics[topic].push(callback);

      return true;
    }
    /**
     * Unsubscibe the given callback from the given topic.
     *
     * @param  {string} topic
     * @param  {Function} callback
     * @returns {boolean}
     */

  }, {
    key: "un",
    value: function un(topic) {
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      // If the topic does not exist, return early
      if (!this._topics.hasOwnProperty(topic)) {
        return false;
      } // If a callback is provided, unsubscribe it, but keep the topic and any
      // other callbacks currently registered


      if (callback) {
        for (var i = 0; i < this._topics[topic].length; i++) {
          if (this._topics[topic][i] === callback) {
            this._topics[topic].splice(i, 1);

            return true;
          }
        } // A callback was provided, but was not previously registered


        return false;
      } // Delete the whole topic


      delete this._topics[topic];
      return true;
    }
    /**
     * Unsubscribe from all topic.
     *
     * @returns {void}
     */

  }, {
    key: "unAll",
    value: function unAll() {
      this._topics = null;
    }
    /**
     * Fire an event and evaluate any registered callbacks in response.
     *
     * @param  {string} topic
     * @param  {mixed} args
     * @returns {boolean}
     */

  }, {
    key: "fire",
    value: function fire(topic) {
      if (!this._topics.hasOwnProperty(topic)) {
        return false;
      }

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      for (var i = 0; i < this._topics[topic].length; i++) {
        this._topics[topic][i].apply(null, args);
      }

      return true;
    }
  }]);

  return Mediator;
}();

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

/*********************
 * UTILITY FUNCTIONS *
 *********************/

/**
 * Convert a hex color code to RGB format.
 *
 * @param  {string} hex
 * @returns {Object}
 */
var hex2rgb = function hex2rgb(hex) {
  var bigint = parseInt(hex.charAt(0) === '#' ? hex.substring(1, 7) : hex, 16);
  return {
    r: bigint >> 16 & 255,
    g: bigint >> 8 & 255,
    b: bigint & 255
  };
};
/**
 * Convert a color in RGB format to a color in HSV format.
 *
 * @param  {Object} rgb
 * @returns {Object}
 */

var rgb2hsv = function rgb2hsv(rgb) {
  var r = rgb.r / 255;
  var g = rgb.g / 255;
  var b = rgb.b / 255;
  var v = Math.max(r, g, b);
  var diff = v - Math.min(r, g, b);

  var diffc = function diffc(c) {
    return (v - c) / 6 / diff + 1 / 2;
  };

  if (diff === 0) {
    return {
      h: 0,
      s: 0,
      v: Math.round(v * 100)
    };
  }

  var h;
  var s = diff / v;
  var rr = diffc(r);
  var gg = diffc(g);
  var bb = diffc(b);

  if (r === v) {
    h = bb - gg;
  } else if (g === v) {
    h = 1 / 3 + rr - bb;
  } else if (b === v) {
    h = 2 / 3 + gg - rr;
  }

  if (h < 0) {
    h++;
  } else if (h > 1) {
    h--;
  }

  return {
    h: Math.round(h * 360),
    s: Math.round(s * 100),
    v: Math.round(v * 100)
  };
};
/**
 * Convert a color in HSV format to a color in RGB format.
 *
 * @param  {Object} hsv
 * @returns {Object}
 */

var hsv2rgb = function hsv2rgb(hsv) {
  if (hsv.s === 0) {
    return {
      r: hsv.v,
      g: hsv.v,
      b: hsv.v
    };
  }

  var h = hsv.h / 60;
  var i = Math.floor(h);
  var s = hsv.s / 100;
  var v = hsv.v / 100 * 255;
  var data = [v * (1 - s), v * (1 - s * (h - i)), v * (1 - s * (1 - (h - i)))];

  switch (i) {
    case 0:
      return {
        r: v,
        g: data[2],
        b: data[0]
      };

    case 1:
      return {
        r: data[1],
        g: v,
        b: data[0]
      };

    case 2:
      return {
        r: data[0],
        g: v,
        b: data[2]
      };

    case 3:
      return {
        r: data[0],
        g: data[1],
        b: v
      };

    case 4:
      return {
        r: data[2],
        g: data[0],
        b: v
      };

    default:
      return {
        r: v,
        g: data[0],
        b: data[1]
      };
  }
};
/**
 * Fetch a JSON file from the given URL.
 *
 * @param  {string} url
 * @returns {Promise}
 */

var getJSON = function getJSON(url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url);

    xhr.onreadystatechange = function () {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status === 200) {
          resolve(JSON.parse(xhr.responseText));
        } else {
          reject(new Error(xhr.statusText));
        }
      }
    };

    xhr.send();
  });
};
/**
 * Convert a generator into a promise resolving state machine.
 *
 * @param  {Generator} generatorFunction
 * @returns {Promise}
 */

var stateResolver = function stateResolver(generatorFunction) {
  return function () {
    var generator = generatorFunction.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      var resume = function resume(method, value) {
        try {
          var result = generator[method](value);

          if (result.done) {
            resolve(result.value);
          } else {
            result.value.then(resumeNext, resumeThrow);
          }
        } catch (e) {
          reject(e);
        }
      };

      var resumeNext = resume.bind(null, 'next');
      var resumeThrow = resume.bind(null, 'throw');
      resumeNext();
    });
  };
};
/**
 * Set the CSS styles for the given element.
 *
 * @param  {Object} elm
 * @param  {Object} styles
 * @returns {Object}
 */

var style = function style(elm, styles) {
  for (var key in styles) {
    if (elm.style[key] !== styles[key]) {
      elm.style[key] = styles[key];
    }
  }

  return elm;
};
/**
 * Check if the given value is an object.
 *
 * @param  {mixed} value
 * @returns {boolean}
 */

var isObject = function isObject(value) {
  var type = _typeof_1(value);

  return value !== null && (type === 'object' || type === 'function');
};
/**
 * Check if the given value is a string.
 *
 * @param  {mixed} value
 * @returns {boolean}
 */

var isString = function isString(value) {
  var type = _typeof_1(value);

  return type === 'string' || type === 'object' && value !== null && !Array.isArray(value) && Object.prototype.toString.call(value) === '[object String]';
};

var WaveView =
/*#__PURE__*/
function () {
  /**
   * The default options for a new instance.
   *
   * @var {Object}
   */

  /**
   * The amplitude data that will be used to draw the waveform.
   *
   * @var {Array|null}
   */

  /**
   * The options for this waveview instance.
   *
   * @var {Object}
   */

  /**
   * The HTML container element for the waveview instance.
   *
   * @var {Object}
   */

  /**
   * The HTML container element for the canvas element.
   *
   * @var {Object}
   */

  /**
   * The HTML canvas element context.
   *
   * @var {Object}
   */

  /**
   * The color variations that will be used for drawing the waveform.
   *
   * @var {Object};
   */

  /**
   * The progress in the range [0-1] of the waveform.
   *
   * @var {Number}
   */

  /**
   * Initialize a new waveview instance.
   *
   * @param  {Array} data
   * @param  {Object} options
   * @returns {void}
   */
  function WaveView(data, options) {
    classCallCheck(this, WaveView);

    defineProperty(this, "_defaultOptions", {
      container: null,
      width: 512,
      height: 128,
      waveColor: '#428bca',
      progressColor: '#31708f',
      barWidth: 4,
      barGap: 1,
      interact: true,
      responsive: true,
      progress: 0,
      useGradient: true
    });

    defineProperty(this, "_data", null);

    defineProperty(this, "_options", void 0);

    defineProperty(this, "_container", void 0);

    defineProperty(this, "_waveContainer", void 0);

    defineProperty(this, "_canvasContext", void 0);

    defineProperty(this, "_colors", void 0);

    defineProperty(this, "_progress", 0);

    // Create a new mediator if there does not exist one yet
    if (!WavePlayer._mediator) {
      WavePlayer._mediator = new Mediator();
    }

    if (data) this.drawWave(data, 0);
    this._options = objectSpread({}, this._defaultOptions, options);
    this.container = 'string' === typeof this._options.container ? document.querySelector(this._options.container) : this._options.container;

    this._createWaveContainer();

    this._colors = this._createColorVariations();

    this._initializeResizeHandler();
  }
  /************************
   * Getters and setters. *
   ************************/

  /**
   * Get the HTML container element for the waveview instance.
   *
   * @returns {Object}
   */


  createClass(WaveView, [{
    key: "drawWave",

    /*********************
     * Public functions. *
     *********************/

    /**
     * Draw a waveform from supplied waveform data.
     *
     * @param  {Array} values
     * @param  {number} progress
     * @returns {void}
     */
    value: function drawWave(values, progress) {
      this._data = values;
      this._progress = progress;
      this._barData = this._calcAvgAmps();
      this.clearWave();

      this._drawBars(this._progress * this._waveContainer.clientWidth);
    }
    /**
     * Update an existing waveform.
     *
     * @param  {number} progress
     * @returns {void}
     */

  }, {
    key: "updateWave",
    value: function updateWave(progress) {
      if (progress) {
        this._progress = progress;
      }

      this.clearWave();

      this._drawBars(this._progress * this._waveContainer.clientWidth);
    }
    /**
     * Clear the canvas HTML element where the waveform is drawn in.
     *
     * @returns {void}
     */

  }, {
    key: "clearWave",
    value: function clearWave() {
      this._canvasContext.clearRect(0, 0, this._canvasContext.canvas.width, this._canvasContext.canvas.height);
    }
    /**
     * Destroy the waveview instance and do the appropriate clean up.
     *
     * @returns {void}
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this._removeCanvasHandlers();

      if (this._resizeHandler) {
        window.removeEventListener('resize', this._resizeHandler);
      }

      WavePlayer._mediator.unAll();

      this._waveContainer && this._container.removeChild(this._waveContainer);
      this._waveContainer = null;
    }
    /**********************
     * Private functions. *
     **********************/

    /**
     * Create the HTML container element for the HTML canvas element in which we
     * will draw the waveform.
     *
     * @returns {void}
     */

  }, {
    key: "_createWaveContainer",
    value: function _createWaveContainer() {
      this._waveContainer = document.createElement('div');
      this._waveContainer.className = 'waveform-container';

      this._container.appendChild(this._waveContainer);

      style(this._waveContainer, {
        display: 'block',
        position: 'relative',
        width: this._options.responsive ? '100%' : "".concat(this._options.width, "px"),
        height: "".concat(this._options.height, "px"),
        overflow: 'hidden'
      });

      this._createCanvas();
    }
    /**
     * Create the HTML canvas element in which we will draw the waveform.
     *
     * @returns {void}
     */

  }, {
    key: "_createCanvas",
    value: function _createCanvas() {
      var clientWidth = this._waveContainer.clientWidth;

      var canvas = this._waveContainer.appendChild(style(document.createElement('canvas'), {
        position: 'absolute',
        top: 0,
        bottom: 0,
        zIndex: 1,
        height: "".concat(this._options.height, "px"),
        width: "".concat(clientWidth, "px") // For responsive, enough to set this to 100% ???

      }));

      this._canvasContext = canvas.getContext('2d');
      this._canvasContext.canvas.width = clientWidth;
      this._canvasContext.canvas.height = this._options.height;

      if (this._options.interact) {
        this._addCanvasHandlers();
      }
    }
    /**
     * Add a canvas click handler.
     *
     * @returns {void}
     */

  }, {
    key: "_addCanvasHandlers",
    value: function _addCanvasHandlers() {
      var _this = this;

      this._mouseClickHandler = function (e) {
        return WavePlayer._mediator.fire('waveview:clicked', _this._coord2Progress(e));
      };

      this._canvasContext.canvas.addEventListener('click', this._mouseClickHandler.bind(this));
    }
    /**
     * Remove the canvas click handler.
     *
     * @returns {void}
     */

  }, {
    key: "_removeCanvasHandlers",
    value: function _removeCanvasHandlers() {
      if (this._mouseClickHandler) {
        this.canvasContext.canvas.removeEventListener('click', this._mouseClickHandler);
      }
    }
    /**
     * Create a color stop variation for the colors provided (used for drawing
     * the gradient).
     *
     * @returns {Object}
     */

  }, {
    key: "_createColorVariations",
    value: function _createColorVariations() {
      var colors = {
        waveColor: [],
        progressColor: []
      };

      for (var c in colors) {
        var tmp = hex2rgb(this._options[c]);
        colors[c].push(tmp);
        tmp = rgb2hsv(tmp);
        colors[c].push(hsv2rgb({
          h: tmp.h,
          s: tmp.s,
          v: tmp.v * 1.4
        }));
      }

      colors.dc = {
        r: colors.waveColor[0].r - colors.progressColor[0].r,
        g: colors.waveColor[0].g - colors.progressColor[0].g,
        b: colors.waveColor[0].b - colors.progressColor[0].b
      };
      return colors;
    }
    /**
     * Initialize the resize handler for the waveview. If the waveview instance
     * is not in responsive mode we do nothing on a resize event, meaning the
     * wave will not be redrawn. If we are in responsive mode the width of the
     * canvas is rescaled and hence the waveform needs to be redrawn after this.
     *
     * @returns {void}
     */

  }, {
    key: "_initializeResizeHandler",
    value: function _initializeResizeHandler() {
      var _this2 = this;

      if (!this._options.responsive) {
        if (this._resizeHandler) {
          window.removeEventListener('resize', this._resizeHandler);
        }

        style(this._waveContainer, {
          width: this._options.width
        });
        return;
      }

      style(this._waveContainer, {
        width: '100%'
      });

      if (this._resizeHandler) {
        window.removeEventListener('resize', this._resizeHandler);
      }

      this._resizeHandler = function () {
        var width = _this2._waveContainer.clientWidth;
        style(_this2._canvasContext.canvas, {
          width: "".concat(width, "px")
        });
        _this2._canvasContext.canvas.width = width;
        _this2._barData = _this2._calcAvgAmps();

        _this2.updateWave(_this2._progress);
      };

      window.addEventListener('resize', this._resizeHandler);
    }
    /**
     * Compute average absolute waveform amplitudes.
     *
     * @returns {Object}
     */

  }, {
    key: "_calcAvgAmps",
    value: function _calcAvgAmps() {
      var _this3 = this;

      // Compute amplitude by averaging over n values in the range
      // [rangeL, rangeR]
      var avgAmp = function avgAmp(dataIndex, rangeL, rangeR, n) {
        var sum = 0.0;

        for (var _i = rangeL; _i <= rangeR; _i++) {
          sum += Math.abs(_this3._data[dataIndex + _i]);
        }

        return sum / n;
      };

      var totalWidth = this._waveContainer.clientWidth;
      var ratio = totalWidth !== this._data.length ? this._data.length / totalWidth : 1;
      var totalBarWidth = this._options.barWidth + this._options.barGap;
      var rangeR = (totalBarWidth - 1) / 2;
      var rangeL = -~~rangeR;
      var incr = totalBarWidth * ratio;
      var bd = {
        amps: [],
        x: []
      };
      rangeR = Math.round(rangeR);
      bd.amps.push(avgAmp(0, 0, rangeR, totalBarWidth));
      bd.x.push(0);
      var i, j;

      for (i = totalBarWidth, j = incr; j + rangeR < this._data.length; i += totalBarWidth, j += incr) {
        bd.amps.push(avgAmp(~~j, rangeL, rangeR, totalBarWidth));
        bd.x.push(i);
      } // See if we can squeeze in one more bar


      j = ~~j;
      rangeR = -(j - this._data.length + 1);

      if (i <= totalWidth - totalBarWidth && rangeR > rangeL) {
        bd.amps.push(avgAmp(j, rangeL, rangeR, rangeR - rangeL));
        bd.x.push(i);
      }

      bd.norm = 1 / Math.max.apply(Math, bd.amps);
      return bd;
    }
    /**
     * Draw the individual waveform bars with a gradient.
     *
     * @param  {number} progressCoord
     * @returns {void}
     */

  }, {
    key: "_drawBars",
    value: function _drawBars(progressCoord) {
      if (!this._barData) return;
      var ctx = this._canvasContext;
      var h0 = ctx.canvas.height;
      var totalBarWidth = this._options.barWidth + this._options.barGap;
      var changeGrad = true;
      ctx.fillStyle = this._options.useGradient ? this._generateGradient(this._colors.progressColor, h0) : this._generateColor(this._colors.progressColor[0]);

      for (var i = 0; i < this._barData.x.length; i++) {
        var xpos = this._barData.x[i];

        if (xpos >= progressCoord - totalBarWidth && changeGrad) {
          if (xpos >= progressCoord) {
            // gradient rule for bars after currently playing bar
            ctx.fillStyle = this._options.useGradient ? this._generateGradient(this._colors.waveColor, h0) : this._generateColor(this._colors.waveColor[0]);
            changeGrad = false; // more efficient: avoids changing this gradient rule multiple times per single function call
          } else {
            // fade between colors when on currently playing bar
            var incr = (progressCoord - xpos) / totalBarWidth;
            var c1 = {
              r: this._colors.waveColor[0].r - this._colors.dc.r * incr,
              g: this._colors.waveColor[0].g - this._colors.dc.g * incr,
              b: this._colors.waveColor[0].b - this._colors.dc.b * incr
            };
            var c2 = null;

            if (this._options.useGradient) {
              c2 = rgb2hsv(c1);
              c2 = hsv2rgb({
                h: c2.h,
                s: c2.s,
                v: c2.v * 1.4
              });
            }

            ctx.fillStyle = this._options.useGradient ? this._generateGradient([c1, c2], h0) : this._generateColor(c1);
          }
        }

        var h = Math.max(h0 * this._barData.amps[i] * this._barData.norm, 0.5);
        ctx.fillRect(xpos, (h0 - h) / 2, this._options.barWidth, h);
      }
    }
    /**
     * Generate a linear gradient from the provided colors.
     *
     * @param  {Array} c
     * @param  {number} h
     * @returns {Object}
     */

  }, {
    key: "_generateGradient",
    value: function _generateGradient(c, h) {
      var grd = this._canvasContext.createLinearGradient(0, 0, 0, h);

      var c1 = "rgba(".concat(~~c[1].r, ", ").concat(~~c[1].g, ", ").concat(~~c[1].b, ", 1)");
      grd.addColorStop(0.0, c1);
      grd.addColorStop(0.3, "rgba(".concat(~~c[0].r, ", ").concat(~~c[0].g, ", ").concat(~~c[0].b, ", 1)"));
      grd.addColorStop(1.0, c1);
      return grd;
    }
    /**
     * Generate a CSS color string from a given color object.
     *
     * @param  {Object} c
     * @returns {string}
     */

  }, {
    key: "_generateColor",
    value: function _generateColor(c) {
      return "rgb(".concat(~~c.r, ", ").concat(~~c.g, ", ").concat(~~c.b, ")");
    }
    /**
     * Calculate the x-coordinate of the current mouse position. The origin is
     * assumed to be at the location of the waveform container HTML element.
     *
     * @param  {MouseEvent} e
     * @returns {number}
     */

  }, {
    key: "_calcMouseCoordX",
    value: function _calcMouseCoordX(e) {
      e.preventDefault();
      return e.clientX - this._waveContainer.getBoundingClientRect().left;
    }
    /**
     * Convert a coordinate to a progress in the range [0-1].
     *
     * @param  {MouseEvent} e
     * @returns {number}
     */

  }, {
    key: "_coord2Progress",
    value: function _coord2Progress(e) {
      return this._calcMouseCoordX(e) / this._waveContainer.clientWidth;
    }
  }, {
    key: "container",
    get: function get() {
      return this._container;
    }
    /**
     * Set the HTML container element for the waveview instance.
     *
     * @param  {Object} container
     * @returns {void}
     */
    ,
    set: function set(container) {
      if (!container) {
        throw new Error('Please supply a valid container element');
      }

      this._container = container;
    }
    /**
     * Get the waveform amplitude data.
     *
     * @returns {Array}
     */

  }, {
    key: "data",
    get: function get() {
      return this._data;
    }
    /**
     * Set the waveform amplitude data.
     *
     * @param  {Array} values
     * @returns {void}
     */
    ,
    set: function set(values) {
      this._data = values;
    }
    /**
     * Check if we can currently interact with the waveview instance.
     *
     * @returns {boolean}
     */

  }, {
    key: "interact",
    get: function get() {
      return this._options.interact;
    }
    /**
     * Set the interaction state of the waveview instance.
     *
     * @param  {boolean} value
     * @returns {void}
     */
    ,
    set: function set(value) {
      this._options.interact = value;

      if (value) {
        this._addCanvasHandlers();
      } else {
        this._removeCanvasHandlers();
      }
    }
    /**
     * Check if the waveview instance is operating in responsive mode.
     *
     * @returns {boolean}
     */

  }, {
    key: "responsive",
    get: function get() {
      return this._options.responsive;
    }
    /**
     * Make the waveview instance responsive, meaning its width will scale along
     * with the width of its parent container.
     *
     * @param  {boolean} value
     * @returns {void}
     */
    ,
    set: function set(value) {
      this._options.responsive = value;

      this._initializeResizeHandler();
    }
    /**
     * Get the width of the drawn waveform.
     *
     * @returns {number}
     */

  }, {
    key: "width",
    get: function get() {
      return this._waveContainer.clientWidth;
    }
    /**
     * Set the width of the drawn waveform. Only has an effect if the waveview
     * instance is not operating in responsive mode.
     *
     * @param  {number} value
     * @returns {void}
     */
    ,
    set: function set(value) {
      this._options.width = value;

      if (!this._options.responsive) {
        style(this._waveContainer, {
          width: "".concat(this._options.width, "px")
        });
        style(this._canvasContext.canvas, {
          width: "".concat(this._options.width, "px")
        });
        this._canvasContext.canvas.width = this._options.width;
        this._barData = this._calcAvgAmps();
      }
    }
    /**
     * Get the height of the drawn waveform.
     *
     * @returns {number}
     */

  }, {
    key: "height",
    get: function get() {
      return this._waveContainer.clientHeight;
    }
    /**
     * Set the height of the drawn waveform.
     *
     * @param  {number} value
     * @returns {void}
     */
    ,
    set: function set(value) {
      this._options.height = value;
      style(this._waveContainer, {
        height: "".concat(this._options.height, "px")
      });
      style(this.canvasContext.canvas, {
        height: "".concat(this._options.height, "px")
      });
      this._canvasContext.canvas.height = this._options.height;
      this._barData = this._calcAvgAmps();
    }
    /**
     * Get the flag for if the waveform is drawn with a gradient.
     *
     * @returns {boolean}
     */

  }, {
    key: "useGradient",
    get: function get() {
      return this._options.useGradient;
    }
    /**
     * Set the flag for if the waveform is drawn with a gradient.
     *
     * @param  {boolean} value
     * @returns {void}
     */
    ,
    set: function set(value) {
      this._options.useGradient = value;
    }
  }]);

  return WaveView;
}();

var runtime = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = module.exports;

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() {
    return this || (typeof self === "object" && self);
  })() || Function("return this")()
);
});

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() {
  return this || (typeof self === "object" && self);
})() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

var runtimeModule = runtime;

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

var regenerator = runtimeModule;

var Playlist =
/*#__PURE__*/
function () {
  /**
   * The default options for a new instance.
   *
   * @var {Object}
   */

  /**
   * The options for this playlist instance.
   *
   * @var {Object}
   */

  /**
   * The scheduler instance used for handling a playlist.
   *
   * @var {Object}
   */

  /**
   * The waveplayer instance associated with this playlist instance.
   *
   * @var {WavePlayer}
   */

  /**
   * The URL's pointing to the audio files that make up the playlist.
   *
   * @var {Array}
   */

  /**
   * The HTML audio element associated with a waveplayer instance.
   *
   * @var {audio}
   */

  /**
   * The index of the current track that is selected in the playlist.
   *
   * @var {Number}
   */

  /**
   * Indicates if the user skipped to a different track in the playlist.
   *
   * @var {boolean}
   */

  /**
   * Initialize a new playlist instance.
   *
   * @param  {Object} wavePlayer
   * @param  {Array} urls
   * @param  {Object} options
   * @returns {void}
   */
  function Playlist(wavePlayer, urls) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    classCallCheck(this, Playlist);

    defineProperty(this, "_defaultOptions", {
      autoPlay: false
    });

    defineProperty(this, "_options", void 0);

    defineProperty(this, "_scheduler", void 0);

    defineProperty(this, "_wavePlayer", void 0);

    defineProperty(this, "_urls", void 0);

    defineProperty(this, "_audioElm", void 0);

    defineProperty(this, "_currentTrackIndex", void 0);

    defineProperty(this, "_skipped", false);

    if (!urls || !(urls instanceof Array)) {
      throw new TypeError('Argument \'urls\' is invalid.');
    }

    if (urls.length === 0) {
      throw new Error('Argument \'urls\' needs to contain at least 1 item.');
    }

    if (!isObject(options)) {
      throw new TypeError('Argument \'options\' is invalid.');
    } // Create a new mediator if there does not exist one yet


    if (!WavePlayer._mediator) {
      WavePlayer._mediator = new Mediator();
    } // Merge any supplied options with default options


    this._options = objectSpread({}, this._defaultOptions, options);
    this._wavePlayer = wavePlayer;
    this._urls = urls;
    this._audioElm = this._wavePlayer._audioElm;
    this._scheduler = this._createScheduler(urls, this._options.autoplay);
  }
  /**
   * Go to the next track in the playlist.
   *
   * @returns {void}
   */


  createClass(Playlist, [{
    key: "next",
    value: function next() {
      if (this._currentTrackIndex < this._urls.length) {
        this._skipped = true;

        this._audioElm.dispatchEvent(new Event('ended'));
      }
    }
    /**
     * Go to the previous track in the playlist.
     *
     * @returns {void}
     */

  }, {
    key: "previous",
    value: function previous() {
      if (this._currentTrackIndex > 0) {
        this._currentTrackIndex -= 2;
        this._skipped = true;

        this._audioElm.dispatchEvent(new Event('ended'));
      }
    }
    /**
     * Skip to a specific track in the playlist.
     *
     * @param  {number} trackNumber
     * @returns {void}
     */

  }, {
    key: "skipTo",
    value: function skipTo(trackNumber) {
      var trackIndex = trackNumber - 1;

      if (trackIndex !== this._currentTrackIndex && trackIndex < this._urls.length && trackIndex >= 0) {
        this._currentTrackIndex = trackIndex - 1;
        this._skipped = true;

        this._audioElm.dispatchEvent(new Event('ended'));
      }
    }
    /**
     * Destroy the playlist instance and do the appropriate clean up.
     *
     * @returns {void}
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this._wavePlayer.pause();

      this._scheduler = null;
    }
    /**
     * Create a new scheduler for the playlist instance.
     *
     * @param  {Array} urls
     * @param  {boolean} autoPlay
     * @returns {Promise}
     */

  }, {
    key: "_createScheduler",
    value: function _createScheduler(urls, autoPlay) {
      var _this = this;

      this._currentTrackIndex = 0;
      var scheduler = stateResolver(
      /*#__PURE__*/
      regenerator.mark(function _callee(urls, me) {
        var _ref, url, data;

        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(me._currentTrackIndex < urls.length)) {
                  _context.next = 10;
                  break;
                }

                _ref = isObject(urls[me._currentTrackIndex]) ? urls[me._currentTrackIndex] : {
                  url: urls[me._currentTrackIndex],
                  data: null
                }, url = _ref.url, data = _ref.data;
                _context.next = 4;
                return me._wavePlayer.load(url, data);

              case 4:
                if (me._currentTrackIndex > 0) {
                  WavePlayer._mediator.fire('waveplayer:playlist:next', me._wavePlayer, {
                    url: urls[me._currentTrackIndex],
                    trackNumber: me._currentTrackIndex + 1
                  });

                  me._wavePlayer.play();
                } else {
                  WavePlayer._mediator.fire('waveplayer:playlist:ready', me._wavePlayer);

                  if (autoPlay || me._skipped) me._wavePlayer.play();
                } // Wait until the current track finishes playing


                _context.next = 7;
                return me._onEnd();

              case 7:
                me._currentTrackIndex++;
                _context.next = 0;
                break;

              case 10:
                return _context.abrupt("return", me._currentTrackIndex);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      scheduler(urls, this).then(function (response) {
        _this._skipped = false;

        WavePlayer._mediator.fire('waveplayer:playlist:finished', _this._wavePlayer, response);
      });
      return scheduler;
    }
    /**
    * Return a promise that resolves itself when the HTML audio element fires an
    * 'ended' event (i.e. when an audio track finished playing).
    *
    * @returns {Promise}
    */

  }, {
    key: "_onEnd",
    value: function _onEnd() {
      var _this2 = this;

      return new Promise(function (resolve) {
        if (_this2._ended) {
          _this2._audioElm.removeEventListener('ended', _this2._ended);
        }

        _this2._ended = function () {
          return resolve('ended');
        };

        _this2._audioElm.addEventListener('ended', _this2._ended.bind(_this2));
      });
    }
  }]);

  return Playlist;
}();

var WavePlayer =
/*#__PURE__*/
function () {
  /**
   * The default options for a new instance.
   *
   * @var {Object}
   */

  /**
   * The options for this waveplayer instance.
   *
   * @var {Object}
   */

  /**
   * The mediator singleton that will be used to listen to events and fire
   * actions in response.
   *
   * @var {Object}
   */

  /**
   * The waveview instance associated with this waveplayer instance.
   *
   * @var {Object}
   */

  /**
   * The HTML audio element associated with this waveplayer instance.
   *
   * @var {audio}
   */

  /**
   * The playlist instance.
   *
   * @var {Playlist}
   */

  /**
   * The position of the playback header relative to the duration of the
   * currently playing track
   *
   * @var {number}
   */

  /**
   * The waveform amplitude data.
   */

  /**
   * Initialize a new waveplayer instance.
   *
   * @param  {Object} options
   * @returns {void}
   */
  function WavePlayer(options) {
    var _this = this;

    classCallCheck(this, WavePlayer);

    defineProperty(this, "_defaultOptions", {
      preload: 'metadata'
    });

    defineProperty(this, "_options", void 0);

    defineProperty(this, "_waveView", void 0);

    defineProperty(this, "_audioElm", void 0);

    defineProperty(this, "_playlist", void 0);

    defineProperty(this, "_currentTime", void 0);

    // Create a new mediator if there does not exist one yet
    if (!WavePlayer._mediator) WavePlayer._mediator = new Mediator();
    this._options = objectSpread({}, this._defaultOptions, options);
    this._waveView = new WaveView(null, objectSpread({}, this._options));
    Promise.all([this._initializeAudioElm(), this._initializeWaveViewInteraction()]).then(function () {
      return WavePlayer._mediator.fire('waveplayer:initialized', _this);
    });
  }
  /************************
   * Getters and setters. *
   ************************/

  /**
   * Get the current volume of the currently loaded / playing track.
   *
   * @returns {number}
   */


  createClass(WavePlayer, [{
    key: "load",

    /*********************
     * Public functions. *
     *********************/

    /**
     * Load an audio file and return a promise which may be used to perform an
     * action when the audio has finished loading.
     *
     * @param  {string} url
     * @param  {Object|Array|null} data
     * @returns {Promise}
     */
    value: function load(url) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return Promise.all([this.loadAudio(url), this.loadWaveform(data || this._jsonUrl(url))]);
    }
    /**
     * Load the audio from the given URL.
     *
     * @param  {string} url
     * @returns {Promise}
     */

  }, {
    key: "loadAudio",
    value: function loadAudio(url) {
      var _this2 = this;

      return new Promise(function (resolve) {
        _this2._audioElm.src = url;

        _this2._audioElm.load();

        _this2._currentTime = 0;

        WavePlayer._mediator.on('waveplayer:canplay', function () {
          return resolve();
        });
      });
    }
    /**
     * Load the waveform data from a given URL to a JSON file or explicitly
     * provided waveform data.
     *
     * @param  {string|Object|Array} data
     * @returns {Promise}
     */

  }, {
    key: "loadWaveform",
    value: function loadWaveform(data) {
      if (isString(data)) {
        // If the data is a URL, fetch the data before drawing
        return this._getWaveformData(data);
      } // Otherwise just draw the wave using the given data


      return Promise.resolve(this._waveView.drawWave(isObject(data) ? toConsumableArray(data[Object.keys(data)[0]]) : toConsumableArray(data), 0));
    }
    /**
     * Start audio playback.
     *
     * @returns {void}
     */

  }, {
    key: "play",
    value: function play() {
      this._audioElm.play();
    }
    /**
     * Pause audio playback.
     *
     * @returns {void}
     */

  }, {
    key: "pause",
    value: function pause() {
      this._audioElm.pause();
    }
    /**
     * Move the playback header to a specific time in the audio file.
     *
     * @param  {number} seconds
     * @returns {void}
     */

  }, {
    key: "skipTo",
    value: function skipTo(seconds) {
      this._audioElm.currentTime = seconds;
    }
    /**
     * Check if audio is currently playing.
     *
     * @returns {boolean}
     */

  }, {
    key: "isPlaying",
    value: function isPlaying() {
      return !this._audioElm.paused;
    }
    /**
     * Subscribe to a waveplayer.js event.
     *
     * @param  {string} topic
     * @param  {Function} fn
     * @returns {void}
     */

  }, {
    key: "on",
    value: function on(topic, fn) {
      WavePlayer._mediator.on(topic, fn);
    }
    /**
     * Unsubscibe from a waveplayer.js event.
     *
     * @param  {string} topic
     * @param  {Function} fn
     * @returns {void}
     */

  }, {
    key: "un",
    value: function un(topic, fn) {
      WavePlayer._mediator.un(topic, fn);
    }
    /**
     * Create a new playlist.
     *
     * @param  {Array} urls
     * @param  {Object} options
     * @returns {Playlist}
     */

  }, {
    key: "createPlaylist",
    value: function createPlaylist(urls) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // Cancel current playlist before starting a new one
      this.cancelPlaylist();
      this._playlist = new Playlist(this, urls, options);
      return this._playlist;
    }
    /**
     * Cancel a playlist.
     *
     * @returns {void}
     */

  }, {
    key: "cancelPlaylist",
    value: function cancelPlaylist() {
      if (this._playlist) {
        this._playlist.destroy();
      }
    }
    /**
     * Destroy the waveplayer instance and do the appropriate clean up.
     *
     * @returns {void}
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this.pause();
      this.cancelPlaylist();

      WavePlayer._mediator.unAll();

      if (this._audioElm) {
        this._audioElm.removeEventListener('canplay', this._canplayHandler);

        this._audioElm.removeEventListener('error', this._errorHandler);

        this._audioElm.removeEventListener('timeupdate', this._timeUpdateHandler);

        if (this._ended) {
          this._audioElm.removeEventListener('ended', this._ended);
        }

        this._audioElm.parentNode && this._audioElm.parentNode.removeChild(this._audioElm);
        this._audioElm = null;
      }

      this._waveView.destroy();
    }
    /**********************
     * Private functions. *
     **********************/

    /**
     * Initialize the interaction with the associated waveview instance by
     * attaching a click handler to the 'waveview:clicked' event.
     *
     * @returns {Promise}
     */

  }, {
    key: "_initializeWaveViewInteraction",
    value: function _initializeWaveViewInteraction() {
      var _this3 = this;

      return Promise.resolve(function () {
        if (_this3._onClickHandler) {
          WavePlayer._mediator.un('waveview:clicked', _this3._onClickHandler);
        } // The 'waveview:clicked' event passes along a number in the range
        // [0-1] that indicates the position of the click relative to the
        // starting point of the waveform


        _this3._onClickHandler = function (progress) {
          if (_this3.isPlaying()) {
            // Skip to new position in audio file if we are currently
            // playing something
            var time = _this3._progressToDuration(progress);

            _this3.skipTo(time);

            WavePlayer._mediator.fire('waveplayer:skipped', _this3, time);
          }
        };

        WavePlayer._mediator.on('waveview:clicked', _this3._onClickHandler.bind(_this3));
      }());
    }
    /**
     * Create and initialize the HTML audio element associated with this
     * waveplayer instance.
     *
     * @returns {Promise}
     */

  }, {
    key: "_initializeAudioElm",
    value: function _initializeAudioElm() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        if (_this4._waveView.container.querySelector('audio')) {
          _this4._audioElm.removeEventListener('canplay', _this4._canplayHandler);

          _this4._audioElm.removeEventListener('error', _this4._errorHandler);

          _this4._audioElm.removeEventListener('timeupdate', _this4._timeUpdateHandler);

          _this4._waveView.container.removeChild(_this4._audioElm);
        } // Create a new audio element and attach listeners


        _this4._audioElm = _this4._createAudioElm();

        _this4._waveView.container.appendChild(_this4._audioElm);

        _this4._canplayHandler = function () {
          WavePlayer._mediator.fire('waveplayer:canplay', _this4);

          resolve('waveplayer:canplay');
        };

        _this4._audioElm.addEventListener('canplay', _this4._canplayHandler.bind(_this4));

        _this4._errorHandler = function (e) {
          switch (e.target.error.code) {
            case e.target.error.MEDIA_ERR_ABORTED:
              reject(new Error('Fetching process aborted by user'));
              break;

            case e.target.error.MEDIA_ERR_NETWORK:
              reject(new Error('There was a problem downloading the audio file'));
              break;

            case e.target.error.MEDIA_ERR_DECODE:
              reject(new Error('There was a problem decoding the audio file'));
              break;

            case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
              reject(new Error('Audio is not supported, check the provided URL'));
              break;

            default:
              reject(new Error('An unknown error occurred'));
          }
        };

        _this4._audioElm.addEventListener('error', _this4._errorHandler.bind(_this4));

        _this4._timeUpdateHandler = function (e) {
          _this4._currentTime = e.target.currentTime;

          _this4._waveView.updateWave(_this4._durationToProgress(_this4._currentTime));
        };

        _this4._audioElm.addEventListener('timeupdate', _this4._timeUpdateHandler.bind(_this4));
      });
    }
    /**
     * Create a new HTML audio element.
     *
     * @returns {audio}
     */

  }, {
    key: "_createAudioElm",
    value: function _createAudioElm() {
      var audioElm = document.createElement('audio');
      audioElm.controls = false;
      audioElm.autoplay = false;
      audioElm.preload = this._options.preload;
      return audioElm;
    }
    /**
     * Get the waveform data for an audio file.
     *
     * @param  {string} url
     * @returns {Promise}
     */

  }, {
    key: "_getWaveformData",
    value: function _getWaveformData(url) {
      var _this5 = this;

      return new Promise(function (resolve, reject) {
        getJSON(url).then(function (response) {
          _this5._waveView.drawWave(isObject(response) ? response[Object.keys(response)[0]] : response, 0);

          resolve('waveplayer:json:fetched');
        }).catch(function (err) {
          return reject(err);
        });
      });
    }
    /**
     * Convert a duration in seconds to a progress in the range [0-1].
     *
     * @param  {number} time
     * @returns {number}
     */

  }, {
    key: "_durationToProgress",
    value: function _durationToProgress(time) {
      return time / this._audioElm.duration;
    }
    /**
     * Convert a progress in the range [0-1] to a time in seconds.
     *
     * @param  {number} progress
     * @returns {number}
     */

  }, {
    key: "_progressToDuration",
    value: function _progressToDuration(progress) {
      return progress * this._audioElm.duration;
    }
    /**
     * Use the given URL to an audio file to determine the correct URL to the
     * associated JSON file holding the waveform data.
     *
     * @param  {string} url
     * @returns {string}
     */

  }, {
    key: "_jsonUrl",
    value: function _jsonUrl(url) {
      return "".concat(url.substr(0, url.lastIndexOf('.')), ".json");
    }
  }, {
    key: "volume",
    get: function get() {
      return this._audioElm.volume;
    }
    /**
     * Set the current volume of the currently loaded / playing track.
     *
     * @param  {number} value
     * @returns {void}
     */
    ,
    set: function set(value) {
      this._audioElm.volume = value;
    }
    /**
     * Check if we can currently interact with the assocated waveview instance.
     *
     * @returns {boolean}
     */

  }, {
    key: "interact",
    get: function get() {
      return this._waveView.interact;
    }
    /**
     * Set the interaction state of the associated waveview instance.
     *
     * @param  {boolean} value
     * @returns {void}
     */
    ,
    set: function set(value) {
      this._waveView.interact = value;
    }
    /**
     * Check if the associated waveview instance is operating in responsive
     * mode.
     *
     * @returns {boolean}
     */

  }, {
    key: "responsive",
    get: function get() {
      return this._waveView.responsive;
    }
    /**
     * Make the associated waveview instance responsive, meaning its width will
     * scale along with the width of its parent container.
     *
     * @param  {boolean} value
     * @returns {void}
     */
    ,
    set: function set(value) {
      this._waveView.responsive = value;
    }
    /**
     * Get the playlist instance associated with this waveplayer instance.
     *
     * @returns {null|Playlist}
     */

  }, {
    key: "playlist",
    get: function get() {
      if (this._playlist) {
        return this._playlist;
      }

      return null;
    }
    /**
     * Get the position of the playback header relative to the duration of the
     * currently loaded / playing track.
     *
     * @returns {number}
     */

  }, {
    key: "currentTime",
    get: function get() {
      return this._currentTime;
    }
    /**
     * Get the duration of the currently loaded / playing track.
     *
     * @returns {number}
     */

  }, {
    key: "duration",
    get: function get() {
      return this._audioElm.duration;
    }
  }]);

  return WavePlayer;
}();

defineProperty(WavePlayer, "_mediator", void 0);

module.exports = WavePlayer;
